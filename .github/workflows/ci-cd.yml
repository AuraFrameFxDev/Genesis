# A revised and efficient CI/CD pipeline for the Genesis project
name: CI/CD Pipeline

on:
  push:
    branches: [ main, AuraOS, Genesis-Embrace-your-Aura, cleanup ]
  pull_request:
    branches: [ main, AuraOS, Genesis-Embrace-your-Aura, cleanup ]
  workflow_dispatch:

jobs:
  # This job builds the Android app, runs tests, and uploads the resulting APKs.
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'
          cache: 'gradle'

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build and run unit tests
        # This single command cleans the project, builds both debug and release APKs,
        # and runs all unit tests for the 'app' module.
        run: ./gradlew :app:build

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk
          retention-days: 7

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: app/build/outputs/apk/release/app-release.apk
          retention-days: 7

  # This job deploys the app. It only runs on pushes to specific branches.
  # It depends on the 'build' job and uses the APK created there instead of rebuilding.
  deploy:
    name: Deploy to Distribution
    needs: build # This ensures the deploy job only runs if the build job succeeds
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/AuraOS' || github.ref == 'refs/heads/Genesis-Embrace-your-Aura')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Release APK from build job
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          # The artifact is downloaded to the root of the workspace
          path: .

      - name: Set up Google Services credentials
        # It's crucial to store your google-services.json content as a secret.
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" > app/google-services.json

      - name: Deploy to a service (e.g., Firebase App Distribution)
        run: |
          echo "The release APK is located at ./app-release.apk"
          echo "Add your deployment script here."
          # Example: ./gradlew app:publishRelease # If you use the Play Publisher plugin
          # Example: ./gradlew app:appDistributionUploadRelease # For Firebase App Distribution
