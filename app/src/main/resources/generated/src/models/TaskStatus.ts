/* tslint:disable */
/* eslint-disable */
/**
 * AuraFrameFX Ecosystem API
 * A comprehensive API for interacting with the AuraFrameFX AI Super Dimensional Ecosystem. Provides access to generative AI capabilities, system customization, user management, and core application features. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@auraframefx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TaskStatus
 */
export interface TaskStatus {
    /**
     * Unique identifier for the task
     * @type {string}
     * @memberof TaskStatus
     */
    taskId: string;
    /**
     * 
     * @type {string}
     * @memberof TaskStatus
     */
    status: TaskStatusStatusEnum;
    /**
     * Percentage completion of the task (0-100)
     * @type {number}
     * @memberof TaskStatus
     */
    progress?: number;
    /**
     * The outcome or output of the task
     * @type {{ [key: string]: any; }}
     * @memberof TaskStatus
     */
    result?: { [key: string]: any; };
    /**
     * Error message if the task failed
     * @type {string}
     * @memberof TaskStatus
     */
    errorMessage?: string;
}


/**
 * @export
 */
export const TaskStatusStatusEnum = {
    Pending: 'PENDING',
    InProgress: 'IN_PROGRESS',
    Completed: 'COMPLETED',
    Failed: 'FAILED',
    Cancelled: 'CANCELLED'
} as const;
export type TaskStatusStatusEnum = typeof TaskStatusStatusEnum[keyof typeof TaskStatusStatusEnum];


/**
 * Check if a given object implements the TaskStatus interface.
 */
export function instanceOfTaskStatus(value: object): value is TaskStatus {
    if (!('taskId' in value) || value['taskId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function TaskStatusFromJSON(json: any): TaskStatus {
    return TaskStatusFromJSONTyped(json, false);
}

export function TaskStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'taskId': json['taskId'],
        'status': json['status'],
        'progress': json['progress'] == null ? undefined : json['progress'],
        'result': json['result'] == null ? undefined : json['result'],
        'errorMessage': json['errorMessage'] == null ? undefined : json['errorMessage'],
    };
}

export function TaskStatusToJSON(value?: TaskStatus | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'taskId': value['taskId'],
        'status': value['status'],
        'progress': value['progress'],
        'result': value['result'],
        'errorMessage': value['errorMessage'],
    };
}

