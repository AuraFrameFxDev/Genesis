/* tslint:disable */
/* eslint-disable */
/**
 * AuraFrameFX Ecosystem API
 * A comprehensive API for interacting with the AuraFrameFX AI Super Dimensional Ecosystem. Provides access to generative AI capabilities, system customization, user management, and core application features. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@auraframefx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AgentType } from './AgentType';
import {
    AgentTypeFromJSON,
    AgentTypeFromJSONTyped,
    AgentTypeToJSON,
} from './AgentType';

/**
 * 
 * @export
 * @interface ConferenceRoom
 */
export interface ConferenceRoom {
    /**
     * Unique identifier for the conference room
     * @type {string}
     * @memberof ConferenceRoom
     */
    id: string;
    /**
     * Name of the conference room
     * @type {string}
     * @memberof ConferenceRoom
     */
    name: string;
    /**
     * 
     * @type {AgentType}
     * @memberof ConferenceRoom
     */
    orchestrator: AgentType;
    /**
     * List of AI agents currently in the room
     * @type {Array<AgentType>}
     * @memberof ConferenceRoom
     */
    activeAgents: Array<AgentType>;
}

/**
 * Check if a given object implements the ConferenceRoom interface.
 */
export function instanceOfConferenceRoom(value: object): value is ConferenceRoom {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('orchestrator' in value) || value['orchestrator'] === undefined) return false;
    if (!('activeAgents' in value) || value['activeAgents'] === undefined) return false;
    return true;
}

export function ConferenceRoomFromJSON(json: any): ConferenceRoom {
    return ConferenceRoomFromJSONTyped(json, false);
}

export function ConferenceRoomFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConferenceRoom {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'orchestrator': AgentTypeFromJSON(json['orchestrator']),
        'activeAgents': ((json['activeAgents'] as Array<any>).map(AgentTypeFromJSON)),
    };
}

export function ConferenceRoomToJSON(value?: ConferenceRoom | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'orchestrator': AgentTypeToJSON(value['orchestrator']),
        'activeAgents': ((value['activeAgents'] as Array<any>).map(AgentTypeToJSON)),
    };
}

