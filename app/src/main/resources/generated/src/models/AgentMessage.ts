/* tslint:disable */
/* eslint-disable */
/**
 * AuraFrameFX Ecosystem API
 * A comprehensive API for interacting with the AuraFrameFX AI Super Dimensional Ecosystem. Provides access to generative AI capabilities, system customization, user management, and core application features. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@auraframefx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AgentType } from './AgentType';
import {
    AgentTypeFromJSON,
    AgentTypeFromJSONTyped,
    AgentTypeToJSON,
} from './AgentType';

/**
 * 
 * @export
 * @interface AgentMessage
 */
export interface AgentMessage {
    /**
     * 
     * @type {AgentType}
     * @memberof AgentMessage
     */
    sender: AgentType;
    /**
     * The content of the message
     * @type {string}
     * @memberof AgentMessage
     */
    message: string;
    /**
     * ISO 8601 timestamp of the message
     * @type {Date}
     * @memberof AgentMessage
     */
    timestamp: Date;
}

/**
 * Check if a given object implements the AgentMessage interface.
 */
export function instanceOfAgentMessage(value: object): value is AgentMessage {
    if (!('sender' in value) || value['sender'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function AgentMessageFromJSON(json: any): AgentMessage {
    return AgentMessageFromJSONTyped(json, false);
}

export function AgentMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): AgentMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'sender': AgentTypeFromJSON(json['sender']),
        'message': json['message'],
        'timestamp': (new Date(json['timestamp'])),
    };
}

export function AgentMessageToJSON(value?: AgentMessage | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'sender': AgentTypeToJSON(value['sender']),
        'message': value['message'],
        'timestamp': ((value['timestamp']).toISOString()),
    };
}

