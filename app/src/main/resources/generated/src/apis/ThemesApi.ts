/* tslint:disable */
/* eslint-disable */
/**
 * AuraFrameFX Ecosystem API
 * A comprehensive API for interacting with the AuraFrameFX AI Super Dimensional Ecosystem. Provides access to generative AI capabilities, system customization, user management, and core application features. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@auraframefx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  Theme,
  ThemeApplyRequest,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ThemeFromJSON,
    ThemeToJSON,
    ThemeApplyRequestFromJSON,
    ThemeApplyRequestToJSON,
} from '../models/index';

export interface ThemeApplyPutRequest {
    themeApplyRequest: ThemeApplyRequest;
}

/**
 * ThemesApi - interface
 * 
 * @export
 * @interface ThemesApiInterface
 */
export interface ThemesApiInterface {
    /**
     * 
     * @summary Apply a theme
     * @param {ThemeApplyRequest} themeApplyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemesApiInterface
     */
    themeApplyPutRaw(requestParameters: ThemeApplyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Apply a theme
     */
    themeApplyPut(requestParameters: ThemeApplyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get available themes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemesApiInterface
     */
    themesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Theme>>>;

    /**
     * Get available themes
     */
    themesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Theme>>;

}

/**
 * 
 */
export class ThemesApi extends runtime.BaseAPI implements ThemesApiInterface {

    /**
     * Apply a theme
     */
    async themeApplyPutRaw(requestParameters: ThemeApplyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['themeApplyRequest'] == null) {
            throw new runtime.RequiredError(
                'themeApplyRequest',
                'Required parameter "themeApplyRequest" was null or undefined when calling themeApplyPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2AuthCode", ["profile"]);
        }

        const response = await this.request({
            path: `/theme/apply`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ThemeApplyRequestToJSON(requestParameters['themeApplyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Apply a theme
     */
    async themeApplyPut(requestParameters: ThemeApplyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.themeApplyPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get available themes
     */
    async themesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Theme>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/themes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ThemeFromJSON));
    }

    /**
     * Get available themes
     */
    async themesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Theme>> {
        const response = await this.themesGetRaw(initOverrides);
        return await response.value();
    }

}
