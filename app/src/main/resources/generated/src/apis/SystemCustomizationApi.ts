/* tslint:disable */
/* eslint-disable */
/**
 * AuraFrameFX Ecosystem API
 * A comprehensive API for interacting with the AuraFrameFX AI Super Dimensional Ecosystem. Provides access to generative AI capabilities, system customization, user management, and core application features. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@auraframefx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  LockScreenConfig,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LockScreenConfigFromJSON,
    LockScreenConfigToJSON,
} from '../models/index';

export interface SystemLockscreenConfigPutRequest {
    lockScreenConfig: LockScreenConfig;
}

/**
 * SystemCustomizationApi - interface
 * 
 * @export
 * @interface SystemCustomizationApiInterface
 */
export interface SystemCustomizationApiInterface {
    /**
     * 
     * @summary Get lock screen configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemCustomizationApiInterface
     */
    systemLockscreenConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LockScreenConfig>>;

    /**
     * Get lock screen configuration
     */
    systemLockscreenConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LockScreenConfig>;

    /**
     * 
     * @summary Update lock screen configuration
     * @param {LockScreenConfig} lockScreenConfig 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemCustomizationApiInterface
     */
    systemLockscreenConfigPutRaw(requestParameters: SystemLockscreenConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update lock screen configuration
     */
    systemLockscreenConfigPut(requestParameters: SystemLockscreenConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class SystemCustomizationApi extends runtime.BaseAPI implements SystemCustomizationApiInterface {

    /**
     * Get lock screen configuration
     */
    async systemLockscreenConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LockScreenConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2AuthCode", ["auraframefx.system"]);
        }

        const response = await this.request({
            path: `/system/lockscreen-config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LockScreenConfigFromJSON(jsonValue));
    }

    /**
     * Get lock screen configuration
     */
    async systemLockscreenConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LockScreenConfig> {
        const response = await this.systemLockscreenConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update lock screen configuration
     */
    async systemLockscreenConfigPutRaw(requestParameters: SystemLockscreenConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['lockScreenConfig'] == null) {
            throw new runtime.RequiredError(
                'lockScreenConfig',
                'Required parameter "lockScreenConfig" was null or undefined when calling systemLockscreenConfigPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2AuthCode", ["auraframefx.system"]);
        }

        const response = await this.request({
            path: `/system/lockscreen-config`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LockScreenConfigToJSON(requestParameters['lockScreenConfig']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update lock screen configuration
     */
    async systemLockscreenConfigPut(requestParameters: SystemLockscreenConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.systemLockscreenConfigPutRaw(requestParameters, initOverrides);
    }

}
