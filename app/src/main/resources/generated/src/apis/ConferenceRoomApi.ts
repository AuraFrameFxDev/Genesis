/* tslint:disable */
/* eslint-disable */
/**
 * AuraFrameFX Ecosystem API
 * A comprehensive API for interacting with the AuraFrameFX AI Super Dimensional Ecosystem. Provides access to generative AI capabilities, system customization, user management, and core application features. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@auraframefx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConferenceRoom,
  ConferenceRoomCreateRequest,
  ErrorResponse,
} from '../models/index';
import {
    ConferenceRoomFromJSON,
    ConferenceRoomToJSON,
    ConferenceRoomCreateRequestFromJSON,
    ConferenceRoomCreateRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface ConferenceCreatePostRequest {
    conferenceRoomCreateRequest: ConferenceRoomCreateRequest;
}

/**
 * ConferenceRoomApi - interface
 * 
 * @export
 * @interface ConferenceRoomApiInterface
 */
export interface ConferenceRoomApiInterface {
    /**
     * 
     * @summary Create a new AI conference room
     * @param {ConferenceRoomCreateRequest} conferenceRoomCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConferenceRoomApiInterface
     */
    conferenceCreatePostRaw(requestParameters: ConferenceCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConferenceRoom>>;

    /**
     * Create a new AI conference room
     */
    conferenceCreatePost(requestParameters: ConferenceCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConferenceRoom>;

}

/**
 * 
 */
export class ConferenceRoomApi extends runtime.BaseAPI implements ConferenceRoomApiInterface {

    /**
     * Create a new AI conference room
     */
    async conferenceCreatePostRaw(requestParameters: ConferenceCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConferenceRoom>> {
        if (requestParameters['conferenceRoomCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'conferenceRoomCreateRequest',
                'Required parameter "conferenceRoomCreateRequest" was null or undefined when calling conferenceCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2AuthCode", ["auraframefx.ai"]);
        }

        const response = await this.request({
            path: `/conference/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConferenceRoomCreateRequestToJSON(requestParameters['conferenceRoomCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConferenceRoomFromJSON(jsonValue));
    }

    /**
     * Create a new AI conference room
     */
    async conferenceCreatePost(requestParameters: ConferenceCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConferenceRoom> {
        const response = await this.conferenceCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
